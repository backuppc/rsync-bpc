# Makefile for rsync_bpc. This is processed by configure to produce the final
# Makefile

prefix=@prefix@
datarootdir=@datarootdir@
exec_prefix=@exec_prefix@
stunnel4=@STUNNEL4@
bindir=@bindir@
mandir=@mandir@

LIBS=@LIBS@
CC=@CC@
CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@
EXEEXT=@EXEEXT@
LDFLAGS=@LDFLAGS@
LIBOBJDIR=lib/

INSTALLCMD=@INSTALL@
INSTALLMAN=@INSTALL@

srcdir=@srcdir@
MKDIR_P=@MKDIR_P@
VPATH=$(srcdir)
SHELL=/bin/sh

VERSION=@RSYNC_VERSION@

.SUFFIXES:
.SUFFIXES: .c .o

GENFILES=configure.sh aclocal.m4 config.h.in proto.h proto.h-tstamp
HEADERS=byteorder.h config.h errcode.h proto.h rsync.h ifuncs.h itypes.h inums.h \
	lib/pool_alloc.h
LIBOBJ=lib/wildmatch.o lib/compat.o lib/snprintf.o lib/mdfour.o lib/md5.o \
	lib/permstring.o lib/pool_alloc.o lib/sysacls.o lib/sysxattrs.o @LIBOBJS@
zlib_OBJS=zlib/deflate.o zlib/inffast.o zlib/inflate.o zlib/inftrees.o \
	zlib/trees.o zlib/zutil.o zlib/adler32.o zlib/compress.o zlib/crc32.o
BPCOBJ=bpc_sysCalls.o backuppc/bpc_attrib.o backuppc/bpc_dirOps.o backuppc/bpc_hashtable.o backuppc/bpc_poolWrite.o \
	backuppc/bpc_attribCache.o backuppc/bpc_fileDigest.o backuppc/bpc_fileZIO.o backuppc/bpc_lib.o backuppc/bpc_refCount.o
OBJS1=flist.o rsync.o generator.o receiver.o cleanup.o sender.o exclude.o \
	util.o util2.o main.o checksum.o match.o syscall.o log.o backup.o delete.o
OBJS2=options.o io.o compat.o hlink.o token.o uidlist.o socket.o hashtable.o \
	fileio.o batch.o clientname.o chmod.o acls.o xattrs.o
OBJS3=progress.o pipe.o
DAEMON_OBJ = params.o loadparm.o clientserver.o access.o connection.o authenticate.o
popt_OBJS=popt/findme.o  popt/popt.o  popt/poptconfig.o \
	popt/popthelp.o popt/poptparse.o
OBJS=$(OBJS1) $(OBJS2) $(OBJS3) $(DAEMON_OBJ) $(LIBOBJ) $(BPCOBJ) @BUILD_ZLIB@ @BUILD_POPT@

TLS_OBJ = tls.o syscall.o lib/compat.o lib/snprintf.o lib/permstring.o lib/sysxattrs.o @BUILD_POPT@

# Programs we must have to run the test cases
CHECK_PROGS = rsync_bpc$(EXEEXT) tls$(EXEEXT) getgroups$(EXEEXT) getfsdev$(EXEEXT) \
	testrun$(EXEEXT) trimslash$(EXEEXT) t_unsafe$(EXEEXT) wildtest$(EXEEXT)

CHECK_SYMLINKS = 

# Objects for CHECK_PROGS to clean
CHECK_OBJS=tls.o testrun.o getgroups.o getfsdev.o t_stub.o t_unsafe.o trimslash.o wildtest.o

# note that the -I. is needed to handle config.h when using VPATH
.c.o:
@OBJ_SAVE@
	$(CC) -I. -I$(srcdir) $(CFLAGS) $(CPPFLAGS) -c $< @CC_SHOBJ_FLAG@
@OBJ_RESTORE@

all: Makefile rsync_bpc$(EXEEXT)

install: all
	-${MKDIR_P} ${DESTDIR}${bindir}
	${INSTALLCMD} ${INSTALL_STRIP} -m 755 rsync_bpc$(EXEEXT) ${DESTDIR}${bindir}

install-all: install

install-strip:
	$(MAKE) INSTALL_STRIP='-s' install

rsync_bpc$(EXEEXT): $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)

$(BPCOBJ): backuppc/backuppc.h
$(OBJS): $(HEADERS)
$(CHECK_OBJS): $(HEADERS)

tls.o xattrs.o: lib/sysxattrs.h
flist.o: rounding.h

rounding.h: rounding.c rsync.h proto.h
	@for r in 0 1 3; do \
	    if $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) -o rounding -DEXTRA_ROUNDING=$$r -I. $(srcdir)/rounding.c >rounding.out 2>&1; then \
		echo "#define EXTRA_ROUNDING $$r" >rounding.h; \
		if test -f "$$HOME/build_farm/build_test.fns"; then \
		    echo "EXTRA_ROUNDING is $$r" >&2; \
		fi; \
		break; \
	    fi; \
	done
	@rm -f rounding
	@if test -f rounding.h; then : ; else \
	    cat rounding.out 1>&2; \
	    echo "Failed to create rounding.h!" 1>&2; \
	    exit 1; \
	fi
	@rm -f rounding.out

tls$(EXEEXT): $(TLS_OBJ)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(TLS_OBJ) $(LIBS)

testrun$(EXEEXT): testrun.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ testrun.o

getgroups$(EXEEXT): getgroups.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ getgroups.o $(LIBS)

getfsdev$(EXEEXT): getfsdev.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ getfsdev.o $(LIBS)

TRIMSLASH_OBJ = trimslash.o syscall.o lib/compat.o lib/snprintf.o
trimslash$(EXEEXT): $(TRIMSLASH_OBJ)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(TRIMSLASH_OBJ) $(LIBS)

T_UNSAFE_OBJ = t_unsafe.o syscall.o util.o util2.o t_stub.o lib/compat.o lib/snprintf.o lib/wildmatch.o
t_unsafe$(EXEEXT): $(T_UNSAFE_OBJ)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(T_UNSAFE_OBJ) $(LIBS)

gen: conf proto.h

conf:
	cd $(srcdir) && $(MAKE) -f prepare-source.mak conf

reconfigure: configure.sh
	./config.status --recheck
	./config.status

configure.sh: configure.ac
	autoconf configure.ac > configure.sh

Makefile: Makefile.in config.status configure.sh config.h.in
	@if test -f Makefile; then cp -p Makefile Makefile.old; else touch Makefile.old; fi
	@./config.status
	@if diff Makefile Makefile.old >/dev/null 2>&1; then \
	    echo "Makefile is unchanged."; \
	    rm Makefile.old; \
	else \
	    if test "$(MAKECMDGOALS)" = reconfigure; then \
		echo 'Continuing with "make reconfigure".'; \
	    else \
		echo "Makefile updated -- rerun your make command."; \
		exit 1; \
	    fi \
	fi

proto: proto.h-tstamp

proto.h: proto.h-tstamp
	@if test -f proto.h; then :; else cp -p $(srcdir)/proto.h .; fi

proto.h-tstamp: $(srcdir)/*.c $(srcdir)/lib/compat.c config.h
	perl $(srcdir)/mkproto.pl $(srcdir)/*.c $(srcdir)/lib/compat.c

man:

rsync.1: rsync.yo
	yodl2man -o rsync.1 $(srcdir)/rsync.yo
	-$(srcdir)/tweak_manpage rsync.1

rsyncd.conf.5: rsyncd.conf.yo
	yodl2man -o rsyncd.conf.5 $(srcdir)/rsyncd.conf.yo
	-$(srcdir)/tweak_manpage rsyncd.conf.5

clean: cleantests
	rm -f *~ $(OBJS) $(CHECK_PROGS) $(CHECK_OBJS) $(CHECK_SYMLINKS) \
		rounding rounding.h *.old

cleantests:
	rm -rf ./testtmp*

# We try to delete built files from both the source and build
# directories, just in case somebody previously configured things in
# the source directory.
distclean: clean
	rm -f Makefile config.h config.status
	rm -f lib/dummy popt/dummy zlib/dummy backuppc/dummy
	rm -f $(srcdir)/Makefile $(srcdir)/config.h $(srcdir)/config.status
	rm -f $(srcdir)/lib/dummy $(srcdir)/popt/dummy $(srcdir)/zlib/dummy $(srcdir)/backuppc/dummy
	rm -f config.cache config.log
	rm -f $(srcdir)/config.cache $(srcdir)/config.log
	rm -f shconfig $(srcdir)/shconfig
	rm -f $(GENFILES)
	rm -rf autom4te.cache

# this target is really just for my use. It only works on a limited
# range of machines and is used to produce a list of potentially
# dead (ie. unused) functions in the code. (tridge)
finddead:
	nm *.o */*.o |grep 'U ' | awk '{print $$2}' | sort -u > nmused.txt
	nm *.o */*.o |grep 'T ' | awk '{print $$3}' | sort -u > nmfns.txt
	comm -13 nmused.txt nmfns.txt

wildtest.o: wildtest.c lib/wildmatch.c rsync.h config.h
wildtest$(EXEEXT): wildtest.o lib/compat.o lib/snprintf.o @BUILD_POPT@
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ wildtest.o lib/compat.o lib/snprintf.o @BUILD_POPT@ $(LIBS)

# TODO: Add 'dist' target; need to know which files will be included

# Run the SPLINT (Secure Programming Lint) tool.  <www.splint.org>
.PHONY: splint
splint:
	splint +unixlib +gnuextensions -weak rsync.c

doxygen:
	cd $(srcdir) && rm dox/html/* && doxygen
